name: Build WASM

env:
  V8_BRANCH: 11.2.60

on:
  workflow_dispatch:
  pull_request:
  push:
    branches:
      - main
      - v1.x
      - v2.x

jobs:
  check-versions:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - run: node scripts/version-checker.js
      - run: node scripts/check_licenses.js

  test-native:
    strategy:
      matrix:
        target:
          - name: linux 64 bits
            os: ubuntu-latest
          - name: windows 64 bits
            os: windows-latest
          - name: macos 64 bits
            os: macos-latest
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v3
      - name: test
        run: |
          cargo check
          cargo test

  wasm-pack:
    runs-on: macos-latest
    strategy:
      matrix:
        target:
          - name: linux 64 bits
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - run: |
          rustup install 1.68.2
          rustup default 1.68.2
          cargo install wasm-pack@0.11.1
          npm ci --ignore-scripts
          npm run build
          rm wasm/README.md wasm/package.json wasm/.gitignore
          npm pack
      - uses: codex-team/action-nodejs-package-info@v1
        id: package

      - uses: actions/upload-artifact@v3
        with:
          name: datadog-native-iast-rewriter-${{ steps.package.outputs.version }}
          path: '*.tgz'

  static-checks:
    strategy:
      matrix:
        run:
          - lint
          - clippy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
      - run: npm ci
      - run: npm run ${{ matrix.run }}

  test-native-js:
    needs: ['wasm-pack']
    strategy:
      matrix:
        target:
          - name: linux 64 bits
            os: ubuntu-latest
            architecture: x64
          - name: windows 64 bits
            os: windows-latest
            architecture: x64
          - name: windows 32 bits
            os: windows-latest
            architecture: x86
          - name: macos 64 bits
            os: macos-latest
            architecture: x64

    runs-on: ${{ matrix.target.os }}
    env:
      NPM_REWRITER: true
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
          architecture: ${{ matrix.target.arch }}
      - run: npm ci --ignore-scripts
      - uses: codex-team/action-nodejs-package-info@v1
        id: package
      - uses: actions/download-artifact@v3
        with:
          name: datadog-native-iast-rewriter-${{ steps.package.outputs.version }}
      - run: npm i datadog-native-iast-rewriter-${{ steps.package.outputs.version }}.tgz
      - run: npm run test:junit
      - run: npm run test:integration:ci
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/build/junit*.xml'
          check_name: junit test report ${{ matrix.target.name }}

  test-docker:
    needs: ['wasm-pack']
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - name: alpine 64 bits
            dockerfile: test.alpine.Dockerfile
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - uses: codex-team/action-nodejs-package-info@v1
        id: package
      - uses: actions/download-artifact@v3
        with:
          name: datadog-native-iast-rewriter-${{ steps.package.outputs.version }}
      - run: docker build -t test -f ./docker/${{ matrix.target.dockerfile }} --build-arg NPM_VERSION=${{ steps.package.outputs.version }} .
      - run: docker run --name tester test
      - run: docker cp tester:/test/build/junit.xml ./junit.xml
      - name: Publish Test Report
        uses: mikepenz/action-junit-report@v3
        if: always()
        with:
          report_paths: '**/junit.xml'
          check_name: junit test report ${{ matrix.target.name }}

  all-good:
    needs: ['static-checks', 'test-native', 'test-native-js', 'test-docker']
    runs-on: ubuntu-latest
    steps:
      - run: echo 'ðŸš€ðŸš€ðŸš€ðŸš€ðŸš€'
